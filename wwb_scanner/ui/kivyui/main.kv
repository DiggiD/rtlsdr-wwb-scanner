<ActionButton>:
    on_release: app.on_action_button_release(self)
    
<RootWidget>:
    orientation: 'vertical'
    plot_container: plot_container
    scan_controls: scan_controls
    ActionBar:
        pos_hint: {'top':1}
        ActionView:
            use_separator: True
            ActionPrevious:
                text: ''
                split_str: ''
                title: 'Action Bar'
                with_previous: False
            ActionGroup:
                text: 'File'
                mode: 'spinner'
                size_hint_x: None
                width: 90
                ActionButton:
                    text: 'New'
                    action: 'file.new'
                ActionButton:
                    text: 'Open'
                    action: 'file.open'
                ActionButton:
                    text: 'Save'
                    action: 'file.save'
                ActionButton:
                    text: 'Save As'
                    action: 'file.save_as'
                ActionButton:
                    text: 'Quit'
                    action: 'file.quit'
            ActionGroup:
                text: 'Scan'
                mode: 'spinner'
                size_hint_x: None
                width: 90
                ActionButton:
                    text: 'Scan Settings'
                    action: 'scan.settings'
                ActionButton:
                    text: 'Perform Scan'
                    action: 'scan.scan'
                ActionButton:
                    text: 'Save Scan'
                    action: 'scan.save'
            ActionGroup:
                text: 'Plots'
                mode: 'spinner'
                size_hint_x: None
                width: 90
                ActionButton:
                    text: 'Import'
                    action: 'plots.import'
                ActionButton:
                    text: 'Export'
                    action: 'plots.export'
    PlotContainer:
        id: plot_container
    ScanControls:
        id: scan_controls
    
<PlotContainer>:
    orientation: 'horizontal'
    tool_panel: tool_panel
    spectrum_graph: spectrum_graph
    SpectrumGraph:
        id: spectrum_graph
    PlotToolPanel:
        id: tool_panel
    
<ColorButton@Button>:
    on_press: print("pressed")
    
<PlotToolPanel>:
    cols: 1
    rows: 8
    row_default_height: self.height / self.rows
    row_force_default: True
    size_hint_x: .2
    canvas:
        Color:
            rgb: .8, .8, .8
        Line:
            rectangle: self.x+1, self.y+1,self.width-1, self.height-1
    
<PlotTools>:
    orientation: 'vertical'
    label_widget: label_widget
    switch_widget: switch_widget
    color_btn: color_btn
    root_widget: app.root
    canvas:
        Color:
            rgb: .8, .8, .8
        Line:
            rectangle: self.x+1, self.y+1,self.width-1, self.height-1
    Label:
        id: label_widget
        text: self.parent.plot.name
        size_hint_y: .5
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: .5
        CheckBox:
            id: selected_checkbox
            group: 'selected_plot'
            on_active: self.parent.parent.plot.selected = self.active
        CheckBox:
            id: switch_widget
            active: self.parent.parent.plot.enabled
            on_active: self.parent.parent.plot.enabled = self.active
        ColorButton:
            id: color_btn
            on_release: self.parent.parent.on_color_btn_release()
            canvas.after:
                Color:
                    rgba: self.parent.parent.plot.color
                Rectangle:
                    size: self.size
                    pos: self.pos
        
<PlotColorPicker>:
    orientation: 'vertical'
    color_picker: color_picker
    ok_btn: ok_btn
    cancel_btn: cancel_btn
    ColorPicker:
        id: color_picker
        color: self.color
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: .2
        Button:
            id: ok_btn
            text: 'Ok'
            on_press: self.parent.parent.color = color_picker.color
        Button:
            id: cancel_btn
            text: 'Cancel'
            on_release: root.close_popup()
            
<ScanRangeControls>:
    orientation: 'horizontal'
    
<ScanRangeTextInput>:
    multiline: False
    on_text_validate: self.validate_input()
    input_filter: 'float'
    
<ScanControls>:
    orientation: 'horizontal'
    size_hint_y: .15
    scan_range_widget: scan_range
    gain_txt: gain_txt
    start_btn: start_btn
    canvas:
        Color:
            rgb: .8, .8, .8
        Line:
            rectangle: self.x+1, self.y+1,self.width-1, self.height-1
    BoxLayout:
        orientation: 'vertical'
        canvas:
            Color:
                rgb: .8, .8, .8
            Line:
                rectangle: self.x+1, self.y+1,self.width-1, self.height-1
        Label:
            text: 'Scan Range'
        ScanRangeControls:
            id: scan_range
            scan_range_start_txt: scan_range_start
            scan_range_end_txt: scan_range_end
            ScanRangeTextInput:
                id: scan_range_start
                range_index: 0
            ScanRangeTextInput:
                id: scan_range_end
                range_index: 1
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: 'Gain'
        TextInput:
            id: gain_txt
            text: '30'
    Button:
        id: start_btn
        text: 'Start'
        on_release: root.on_scan_button_release()

<SpectrumGraph>:
    size_hint: [.8, .8]
    
<SpectrumPlot>:
    pos_hint: {'x':0, 'y':0}
    size_hint: [1., 1.]
    canvas:
        Color:
            rgba: self.color
        Line:
            points: self.points

<ScanProgress>:
    orientation: 'vertical'
    progress_bar: progress_bar
    cancel_btn: cancel_btn
    root_widget: app.root
    ProgressBar:
        id: progress_bar
        value_normalized: self.parent.progress
    Button:
        id: cancel_btn
        text: 'Cancel'
        on_release: self.parent.cancel_scan()
    
