<ScanControls>:
    orientation: 'horizontal'
    start_btn: start_btn
    stop_btn: stop_btn
    panel_widget: panel_widget
    live_view: live_view
    live_spectrum_graph: live_spectrum_graph
    canvas:
        Color:
            rgb: .8, .8, .8
        Line:
            rectangle: self.x+1, self.y+1,self.width-1, self.height-1
    TabbedPanel:
        id: panel_widget
        do_default_tab: False
        canvas:
            Color:
                rgb: .8, .8, .8
            Line:
                rectangle: self.x+1, self.y+1,self.width-1, self.height-1
        TabbedPanelItem:
            text: 'General'
            BoxLayout:
                orientation: 'horizontal'
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Scan Range'
                    BoxLayout:
                        orientation: 'horizontal'
                        TextInput:
                            multiline: False
                            text: '%07.3f' % (root.scan_range[0])
                            on_focus: if not self.focus: root.scan_range[0] = float(self.text)
                        TextInput:
                            multiline: False
                            text: '%07.3f' % (root.scan_range[1])
                            on_focus: if not self.focus: root.scan_range[1] = float(self.text)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Gain'
                    Button:
                        text: str(root.gain)
                        on_release: root.gain_dropdown.open(self)
                NumericOption:
                    label_text: 'Freq Correction'
                    value: root.freq_correction
                    on_value: root.freq_correction = self.value
                NumericOption:
                    label_text: 'Sample Rate'
                    is_float: True
                    value: root.sample_rate / 1000.
                    on_value: root.sample_rate = self.value * 1000.
                NumericOption:
                    label_text: 'Overlap Ratio (MHz)'
                    is_float: True
                    value: root.sweep_overlap_ratio
                    on_value: root.sweep_overlap_ratio = self.value
        TabbedPanelItem:
            text: 'Advanced'
            BoxLayout:
                orientation: 'horizontal'
                NumericOption:
                    label_text: 'Sweeps per scan'
                    value: root.sweeps_per_scan
                    on_value: root.sweeps_per_scan = self.value
                NumericOption:
                    label_text: 'Samples per sweep'
                    is_float: False
                    value: root.samples_per_sweep
                    on_value: root.samples_per_sweep = self.value
                NumericOption:
                    label_text: 'Window Size'
                    allownone: True
                    value: root.window_size
                    on_value: root.window_size = self.value
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Window Type'
                    Button:
                        text: root.window_type
                        on_release: root.window_type_dropdown.open(self)
                NumericOption:
                    label_text: 'FFT Size'
                    value: root.fft_size
                    on_value: root.fft_size = self.value
        TabbedPanelItem:
            text: 'Device'
            BoxLayout:
                orientation: 'horizontal'
                BoolOption:
                    label_text: 'Remote Host'
                    value: root.is_remote
                    on_value: root.is_remote = self.value
                TextOption:
                    label_text: 'Host address'
                    value: root.remote_hostname
                    on_value: root.remote_hostname = self.value
                NumericOption:
                    label_text: 'Host Port'
                    value: root.remote_port
                    on_value: root.remote_port = self.value
        TabbedPanelItem:
            id: live_view
            text: 'Live View'
            BoxLayout:
                orientation: 'vertical'
                Label:
                    size_hint_y: .1
                    text: ''
                SpectrumGraphSimple:
                    id: live_spectrum_graph
                    size_hint_y: .9
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: .2
        Button:
            id: start_btn
            text: 'Start'
            disabled: root.scanning
            on_release: root.on_scan_button_release()
        Button:
            id: stop_btn
            text: 'Stop'
            diabled: True
            on_release: root.on_stop_button_release()

<ScanGainDropDown>:
    on_select: self.scan_controls.gain = args[1]

<ScanGainDropDownBtn>:
    size_hint_y: None
    height: 44
    text: str(self.gain)
    on_release: self.parent.parent.select(self.gain)

<WindowTypeDropDown>:
    on_select: self.scan_controls.window_type = args[1]

<WindowTypeDropDownBtn>:
    size_hint_y: None
    height: 44
    on_release: self.parent.parent.select(self.text)


<NumericOption>:
    orientation: 'vertical'
    Label:
        text: root.label_text
    TextInput:
        multiline: False
        input_filter: None if root.allownone else {True:'float', False:'int'}.get(root.is_float)
        text: str(root.value)
        on_focus:
            if not self.focus and root.allownone and not self.text.isdigit():\
            root.value = None
            elif not self.focus and root.is_float: root.value = float(self.text)
            elif not self.focus: root.value = int(self.text)

<TextOption>:
    orientation: 'vertical'
    Label:
        text: root.label_text
    TextInput:
        multiline: False
        text: root.value
        on_focus: if not self.focus: root.value = self.text

<BoolOption>:
    orientation: 'horizontal'
    Label:
        text: root.label_text
    CheckBox:
        active: root.value
        on_active: root.value = self.active
