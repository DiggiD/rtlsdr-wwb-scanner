<ScanControls>:
    orientation: 'horizontal'
    start_btn: start_btn
    stop_btn: stop_btn
    panel_widget: panel_widget
    live_view: live_view
    live_spectrum_graph: live_spectrum_graph
    canvas:
        Color:
            rgb: .8, .8, .8
        Line:
            rectangle: self.x+1, self.y+1,self.width-1, self.height-1
    TabbedPanel:
        id: panel_widget
        do_default_tab: False
        canvas:
            Color:
                rgb: .8, .8, .8
            Line:
                rectangle: self.x+1, self.y+1,self.width-1, self.height-1
        TabbedPanelItem:
            text: 'General'
            BoxLayout:
                orientation: 'horizontal'
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Scan Range'
                    BoxLayout:
                        orientation: 'horizontal'
                        TextInput:
                            multiline: False
                            text: '%07.3f' % (root.scan_range[0])
                            on_focus: if not self.focus: root.scan_range[0] = float(self.text)
                        TextInput:
                            multiline: False
                            text: '%07.3f' % (root.scan_range[1])
                            on_focus: if not self.focus: root.scan_range[1] = float(self.text)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Gain'
                    Button:
                        text: str(root.gain)
                        on_release: root.gain_dropdown.open(self)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Freq Correction'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(root.freq_correction)
                        on_focus: if not self.focus: root.freq_correction = int(self.text)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Sample Rate'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(int(root.sample_rate / 1000))
                        on_focus: if not self.focus: root.sample_rate = float(self.text) * 1000
        TabbedPanelItem:
            text: 'Advanced'
            BoxLayout:
                orientation: 'horizontal'
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Samples per scan'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(root.samples_per_scan)
                        on_focus: if not self.focus: root.samples_per_scan = int(self.text)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Window Size'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(root.window_size)
                        on_focus: if not self.focus: root.window_size = int(self.text)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Window Type'
                    Button:
                        text: root.window_type
                        on_release: root.window_type_dropdown.open(self)
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'FFT Size'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(root.fft_size)
                        on_focus: root.on_fft_size_input_focus(self)
        TabbedPanelItem:
            text: 'Device'
            BoxLayout:
                orientation: 'horizontal'
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Remote Host'
                    CheckBox:
                        active: root.is_remote
                        on_active: root.is_remote = self.active
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Host address'
                    TextInput:
                        multiline: False
                        text: root.remote_hostname
                        on_focus: if not self.focus: root.remote_hostname = self.text
                BoxLayout:
                    orientation: 'vertical'
                    Label:
                        text: 'Host Port'
                    TextInput:
                        multiline: False
                        input_filter: 'int'
                        text: str(root.remote_port)
                        on_focus: if not self.focus: root.remote_port = int(self.text)
        TabbedPanelItem:
            id: live_view
            text: 'Live View'
            BoxLayout:
                orientation: 'vertical'
                Label:
                    size_hint_y: .1
                    text: ''
                SpectrumGraphSimple:
                    id: live_spectrum_graph
                    size_hint_y: .9
    BoxLayout:
        orientation: 'vertical'
        size_hint_x: .2
        Button:
            id: start_btn
            text: 'Start'
            disabled: root.scanning
            on_release: root.on_scan_button_release()
        Button:
            id: stop_btn
            text: 'Stop'
            diabled: True
            on_release: root.on_stop_button_release()

<ScanGainDropDown>:
    on_select: self.scan_controls.gain = args[1]

<ScanGainDropDownBtn>:
    size_hint_y: None
    height: 44
    text: str(self.gain)
    on_release: self.parent.parent.select(self.gain)

<WindowTypeDropDown>:
    on_select: self.scan_controls.window_type = args[1]

<WindowTypeDropDownBtn>:
    size_hint_y: None
    height: 44
    on_release: self.parent.parent.select(self.text)
